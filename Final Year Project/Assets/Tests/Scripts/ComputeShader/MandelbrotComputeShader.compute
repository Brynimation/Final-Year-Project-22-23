// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
/*RWTexture2D is essentially an array of float4s. Each represents the rgba colour of each pixel.*/
RWTexture2D<float4> Result;

struct MandelbrotData
{
    float width;
    float height;
    float realOrigin;
    float complexOrigin;
    int screenWidth;
    int screenHeight;
};

/*This is a reference to the ComputeBuffer we created in our C# script. A StructuredBuffer in HLSL
is a readonly buffer.*/
StructuredBuffer<MandelbrotData> buffer;
uint maxIterations; 

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture.


/*numthreads(X,Y,Z) describes the structure of a thread group. X threads in the x direction, Y threads in the 
y direction, Z threads in the z direction for a total of X * Y * Z threads in the group.*/
[numthreads(24,24,1)]
//id is a reference to the current thread being executed on the gpu.
void CSMain (uint3 id : SV_DispatchThreadID)
{
    /*Mandelbrot escape function.*/
    float real;
    float imaginary;
    float real2;
    float imaginary2;

    /*declare offsets to account for the positions of the pixels on the screen.*/
    float xOffset = (float) id.x / buffer[0].screenWidth * buffer[0].width;
    float yOffset = (float) id.y / buffer[0].screenHeight * buffer[0].height;
    uint iterationCount; //Number of iterations we have run per pixel.

    real = buffer[0].realOrigin + xOffset;
    imaginary = buffer[0].complexOrigin + yOffset;

    float4 colour = {0.0f, 0.0f, 0.0f, 1.0f};

    for(uint i = 0; i < maxIterations; i++)
    {
        real2 = real * real;
        imaginary2 = imaginary * imaginary;

        if(real2 + imaginary2 > 4)
        {
            break;
        }else{
            imaginary = 2.0 * real * imaginary * buffer[0].complexOrigin + yOffset;
            real = real2 - imaginary2 + buffer[0].realOrigin + xOffset;
            iterationCount++;
        }
     }
    if(iterationCount != maxIterations)
    {
        int colourMod16 = iterationCount % 16;
        switch(colourMod16)
        {
            case 0:    
            {
                colour[0] = 66.0f/255.0f;
                colour[1] = 30.0f/255.0f;
                colour[2] = 15.0f/255.0f;
                break;
            }
            case 1:
            {
                colour[0] = 25.0f/255.0f;
                colour[1] = 7.0f /255.0f;
                colour[2] = 26.0f/255.0f;
                break;
            }
            case 2:
            {
                colour[0] = 9.0f/255.0f;
                colour[1] = 1.0f/255.0f;
                colour[2] = 47.0f/255.0f;
                break;
            }
            case 3:
            {
                colour[0] = 4.0f / 255.0f;
                colour[1] = 4.0f / 255.0f;
                colour[2] = 73.0f / 255.0f;
                break;
            }
            case 4:
            {
                colour[0] = 0.0f/255.0f;
                colour[1] = 7.0f/255.0f;
                colour[2] = 100.0f/255.0f;   
                break;
            }
            case 5:
            {
                colour[0] = 12.0f/255.0f;
                colour[1] = 44.0f/255.0f; 
                colour[2] = 138.0f/255.0f;
                break;
            }
            case 6:
            {
                colour[0] = 24.0f/255.0f;
                colour[1] = 82.0f/255.0f; 
                colour[2] = 177.0f/255.0f;  
                break;
            }
            case 7:
            {
                colour[0] = 57.0f/255.0f;
                colour[1] = 125.0f/255.0f; 
                colour[2] = 209.0f/255.0f; 
                break;
            }
            case 8:
            {
                colour[0] = 134.0f/255.0f;
                colour[1] = 181.0f/255.0f; 
                colour[2] = 229.0f/255.0f;  
                break;
            }            
            case 9:
            {
                colour[0] = 211.0f/255.0f;
                colour[1] = 236.0f/255.0f; 
                colour[2] = 248.0f/255.0f;   
                break;
            }
            case 10:
            {
                colour[0] = 241.0f / 255.0f;
                colour[1] = 233.0f / 255.0f;
                colour[2] = 191.0f / 255.0f;
                break;
            }
            case 11:
            {
                colour[0] = 248.0f / 255.0f;
                colour[1] = 201.0f / 255.0f;
                colour[2] = 95.0f / 255.0f;
                break;
            }
            case 12:
            {
                colour[0] = 255.0f/255.0f;
                colour[1] = 170.0f/255.0f; 
                colour[2] = 0.0f/255.0f;
                break;
            }
            case 13:
            {
                colour[0] = 204.0f/255.0f;
                colour[1] = 128.0f/255.0f; 
                colour[2] = 0.0f/255.0f;
                break;
            }
            case 14:
            {
                colour[0] = 153.0f/255.0f;
                colour[1] = 87.0f/255.0f; 
                colour[2] = 0.0f/255.0f; 
                break;
            }
            case 15:
            {
                colour[0] = 106.0f/255.0f;
                colour[1] = 52.0f/255.0f; 
                colour[2] = 3.0f/255.0f;
                break;
            }
        }
        //colour function -https://stackoverflow.com/questions/16500656/which-color-gradient-is-used-to-color-mandelbrot-in-wikipedia)
    Result[id.xy] = colour;
    }
}
