// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


//AppendStructuredBuffer<float3> _PositionsLOD0;
//AppendStructuredBuffer<float3> _PositionsLOD1;

struct Plane
{
    float3 normal;
    float distance;
};

struct InstanceData
{
   float3 position;
   float4 colour;
   float radius;
   uint culled;
};
AppendStructuredBuffer<float3> _PositionsLODAppend0;
AppendStructuredBuffer<float3> _PositionsLODAppend1;
RWStructuredBuffer<InstanceData> _PositionsLOD0;
RWStructuredBuffer<InstanceData> _PositionsLOD1;
StructuredBuffer<Plane> _ViewFrustumPlanes;

uniform float4 _StandardColour;
uniform float4 _H2RegionColour;
uniform float3 _GalacticCentre;
uniform float _MinEccentricity;
uniform float _MaxEccentricity;
uniform float _GalacticDiskRadius;
uniform float _GalacticHaloRadius;
uniform float _GalacticBulgeRadius;
uniform float _AngularOffsetMultiplier;
uniform float3 _CameraPosition;
uniform float _LODSwitchDist;
uniform int _NumParticles;
uniform float _time;

float GenerateRandom(int x)
{
    float2 p = float2(x, sqrt(x));
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

float3 calculatePosition(float theta, float angleOffset, float a, float b, int id)
{
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    float cosOffset = cos(angleOffset);
    float sinOffset = sin(angleOffset);

    float xPos = a * cosTheta * cosOffset - b * sinTheta * sinOffset + _GalacticCentre.x;
    float yPos = a * cosTheta * sinOffset + b * sinTheta * cosOffset + _GalacticCentre.y;
    float zPos = 0.0;
    float3 pos = float3(xPos, yPos, zPos);
    return pos;
}
float GetSemiMajorAxis(float x)
{
    return(x * x * x * _GalacticDiskRadius);
}

float GetEccentricity(float r)
{
    if (r < _GalacticBulgeRadius)
    {
       return lerp(_MaxEccentricity, _MinEccentricity, r / _GalacticBulgeRadius);
    }
    else if (r >= _GalacticBulgeRadius && r < _GalacticDiskRadius)
    {
        return lerp(_MinEccentricity, _MaxEccentricity, (r - _GalacticBulgeRadius) / (_GalacticDiskRadius - _GalacticBulgeRadius));
    }
    else if (r >= _GalacticDiskRadius && r < _GalacticHaloRadius)
    {
        return lerp(_MaxEccentricity, 1.0, (r - _GalacticDiskRadius) /(_GalacticHaloRadius - _GalacticDiskRadius));
    }
    else {
        return 1.0;
    }
}


            
float GetRandomAngle(uint id)
{
    return radians((GenerateRandom(id) * 360));
}

float GetAngularVelocity(uint i, float r)
{
    return sqrt((i * 50)/((_NumParticles - 1) * r)); //angularVel = sqrt(G * mass within the radius r / radius^3)
}
float GetAngularOffset(uint id)
{
    int multiplier = id * _AngularOffsetMultiplier;
    int finalParticle = _NumParticles - 1;
    return radians((multiplier/(float)finalParticle) * 360);
}
float3 GetPointOnEllipse(uint id)
{
    float semiMajorAxis = GetSemiMajorAxis(id/(float)_NumParticles);
    float eccentricity = GetEccentricity(semiMajorAxis); 
    float angularVelocity = GetAngularVelocity(id, semiMajorAxis);
    float semiMinorAxis = eccentricity * semiMajorAxis;   
    float currentAngularOffset = GetAngularOffset(id);
    float theta = GetRandomAngle(id) + angularVelocity * _time;
    return calculatePosition(theta, currentAngularOffset, semiMajorAxis, semiMinorAxis, id);
}

uint IntersectSphere(float3 centre, float radius)
{

    for(uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if(normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}
/*[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    if(id.x >= _NumParticles) return;
    /*Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object'
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    InstanceData data;
    data.id = id.x;
    data.radius = GenerateRandom(id.x);
    data.colour = (id.x % 100) == 0 ? float4(1,0,0,1) : float4(0,1,0,1);
    data.position = float3(0, 0, - _GalacticHaloRadius * 2);

    //_PositionsLOD0[id.x] = data;
    //_PositionsLOD1[id.x] = data;
    float3 posObjectSpace = GetPointOnEllipse(id.x);

    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if(inViewFrustum == 0) return; 
    if(dist < _LODSwitchDist)
    {
         data.position = posObjectSpace;
         InterlockedAdd(_PositionsLOD0, data);
    }else{
         data.position = posObjectSpace;
         InterlockedAdd(_PositionsLOD1, data);
    }
}
*/

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{   
    if(id.x >= _NumParticles) return;
    /*Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object*/
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    InstanceData data;
    data.radius = (id.x % 100) == 0 ? 100 : 50;
    data.colour = (id.x % 100) == 0 ? _H2RegionColour : _StandardColour;
    data.position = float3(0, 0, - _GalacticHaloRadius * 2);


    float3 posObjectSpace = GetPointOnEllipse(id.x);
    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, data.radius);
    data.culled = inViewFrustum;
    _PositionsLOD0[id.x] = data;
    _PositionsLOD1[id.x] = data;
    if(inViewFrustum == 0) return; 
    if(dist < _LODSwitchDist)
    {
        _PositionsLOD0[id.x].position = posObjectSpace;
    }else{
        _PositionsLOD1[id.x].position = posObjectSpace;
    }
}
/*
[numthreads(256,1,1)]
void CSMain3 (uint3 id : SV_DispatchThreadID)
{   
    if(id.x >= _NumParticles) return;
    Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object'
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    _PositionsLOD0[id.x] = float3(0, 0, -15000);
    _PositionsLOD1[id.x] = float3(0, 0, -15000);
    float3 posObjectSpace = GetPointOnEllipse(id.x);
    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if(inViewFrustum == 0) return; 
    if(dist < _LODSwitchDist)
    {
        _PositionsLOD0[id.x] = posObjectSpace;
    }else{
        _PositionsLOD1[id.x] = posObjectSpace;
    }
}*/
[numthreads(256,1,1)]
void CSMain2 (uint3 id : SV_DispatchThreadID)
{   
    if(id.x >= _NumParticles) return;
    //_PositionsLOD0[id.x] = float3(0, 0, -10000);
    //_PositionsLOD1[id.x] = float3(0, 0, -10000);
    float3 posObjectSpace = GetPointOnEllipse(id.x);
    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if(inViewFrustum == 0) return; 
    if(dist < _LODSwitchDist)
    {
        _PositionsLODAppend0.Append(posObjectSpace);
    }else{
        _PositionsLODAppend1.Append(posObjectSpace);
    }
}