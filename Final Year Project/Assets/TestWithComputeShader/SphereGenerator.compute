// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWBuffer<uint> _IndexBuffer;
RWStructuredBuffer<float3> _VertexBuffer;
StructuredBuffer<float3> _Positions;
uint _Resolution;
uint _NumVertsPerInstance;


/*
        void IMeshGenerator.Execute<S>(int i, S streams)
        {
            int uCoord = i / 6;

            //The origin, uAxis, vAxis, normal and tangent are determined by the index. 
            CubeFace side = new CubeFace(i - 6 * uCoord);
            
            int vertexIndex = 4 * Resolution * (Resolution * side.id + uCoord);
            int triangleIndex = 2 * Resolution * (Resolution * side.id + uCoord);

            float3 uA = side.uvOrigin + side.uAxis * (float)uCoord / Resolution;
            float3 uB = side.uvOrigin + side.uAxis * (float)(uCoord + 1) / Resolution;

            float2 uv0 = float2(0f, 0f);
            float2 uv1 = float2(1f, 0f);
            float2 uv2 = float2(0f, 1f);
            float2 uv3 = float2(1f, 1f);

            /*Since quads share vertices, we can cache the computation of the rightmost vertices and use them as the leftmost
             vertices of the next quad. This saves some compute.
            float3 p0 = normalize(uA); 
            float3 p1 = normalize(uB);
            float4 tangent = float4(normalize(p1 - p0), 1);
            for (int vCoord = 1; vCoord <= Resolution; vCoord++, vertexIndex += 4, triangleIndex += 2)
            {
                float3 p2 = normalize(uA + side.vAxis * (float)vCoord / Resolution);
                float3 p3 = normalize(uB + side.vAxis * (float)vCoord / Resolution);

                streams.SetVertex(vertexIndex, new Vertex(p0, p0, tangent, uv0));
                streams.SetVertex(vertexIndex + 1, new Vertex(p1, p1, tangent, uv1));

                tangent = float4(normalize(p3 - p2), 1);

                streams.SetVertex(vertexIndex + 2, new Vertex(p2, p2, tangent, uv2));
                streams.SetVertex(vertexIndex + 3, new Vertex(p3, p3, tangent, uv3));

                streams.SetTriangle(triangleIndex + 0, vertexIndex + int3(0, 2, 1));
                streams.SetTriangle(triangleIndex + 1, vertexIndex + int3(1, 2, 3));

                p0 = p2;
                p1 = p3;
                
            }

        }

                public CubeFace(int id) 
        {
            this.id = id;
            switch (id) 
            {
                case 0:
                    uvOrigin = float3(-1, -1, -1);
                    uAxis = 2f * right();
                    vAxis = 2f * up();
                    normal = back();
                    tangent = float4(1f, 0f, 0f, -1f);
                    break;
                case 1:
                    uvOrigin = float3(1f, -1f, -1f);
                    uAxis = 2f * forward();
                    vAxis = 2f * up();
                    normal = right();
                    tangent = float4(0f, 0f, 1f, -1f);
                    break;
                case 2:
                    uvOrigin = float3(-1f, -1f, -1f);
                    uAxis = 2f * forward();
                    vAxis = 2f * right();
                    normal = down();
                    tangent = float4(0f, 0f, 1f, -1f);
                    break;
                case 3:
                    uvOrigin = float3(-1f, -1f, 1f);
                    uAxis = 2f * up();
                    vAxis = 2f * right();
                    normal = forward();
                    tangent = float4(0f, 1f, 0f, -1f);
                    break;
                case 4:
                    uvOrigin = float3(-1f, -1f, -1f);
                    uAxis = 2f * up();
                    vAxis = 2f * forward();
                    normal = left();
                    tangent = float4(0f, 1f, 0f, -1f);
                    break;
                case 5:
                    uvOrigin = float3(-1f, 1f, -1f);
                    uAxis = 2f * right();
                    vAxis = 2f * forward();
                    normal = up();
                    tangent = float4(1f, 0f, 0f, -1f);
                    break;
                default:
                    uvOrigin = float3(-1, -1, -1); ;
                    uAxis = 2f * right();
                    vAxis = 2f * up();
                    normal = back();
                    tangent = float4(1f, 0f, 0f, -1f);
                    break;
            }
        }
*/
    float4x4 CreateMatrix(float3 pos, float3 dir, float3 up, uint id) {
        float3 zaxis = normalize(dir);
        float3 xaxis = normalize(cross(up, zaxis));
        float3 yaxis = cross(zaxis, xaxis);
        //float scale = GenerateRandom(id) * _MaxStarSize;
        //Transform the vertex into the object space of the currently drawn mesh using a Transform Rotation Scale matrix.
        return float4x4(
            xaxis.x, yaxis.x, zaxis.x, pos.x,
            xaxis.y, yaxis.y, zaxis.y, pos.y,
            xaxis.z, yaxis.z, zaxis.z, pos.z,
            0, 0, 0, 1
        );
    }

    float4x4 _ModelMatrix;

struct CubeFace
{
   int id;
   float3 uvOrigin; //origin position in the cube's space
   float3 uAxis;
   float3 vAxis;
};
CubeFace GenerateCubeFaceProperties(uint3 id)
{
    CubeFace cf;
    float3 uvOrigin;
    float3 uAxis;
    float3 vAxis;
    switch(id.z % 6)
    {
        case 0:
           uvOrigin =  float3(-1, -1, -1);
           uAxis = 2 * float3(1, 0, 0);
           vAxis = 2 * float3(0, 1, 0); 
           break;
        case 1:
            uvOrigin =  float3(1, -1, -1);
            uAxis = 2 * float3(0, 0, 1);
            vAxis = 2 * float3(0, 1, 0);
            break;
        case 2:
            uvOrigin =  float3(-1, -1, -1);
            uAxis = 2 * float3(0,0,1);
            vAxis = 2 * float3(1,0,0);
            break;
        case 3:
            uvOrigin =  float3(-1, -1, 1);
            uAxis = 2 * float3(0, 1, 0);
            vAxis = 2 * float3(1,0,0);
            break;
        case 4:
            uvOrigin = float3(-1, -1, -1);
            uAxis = 2 * float3(0, 1, 0);
            vAxis = 2 * float3(0,0,1);
            break;
        case 5:
            uvOrigin = float3(-1, 1, -1);
            uAxis = 2 * float3(1,0,0);
            vAxis = 2 * float3(0,0,1);
            break;
        default:
            break;
    }
    //_ModelMatrix = CreateMatrix(float3(10, 10, 10), float3(1.0,1.0,1.0), float3(0.0, 1.0, 0.0), id.x);
    cf.id = id.z;
    cf.uvOrigin = uvOrigin;
    cf.uAxis = uAxis;
    cf.vAxis = vAxis;
    return cf;
}

uint indexFromId(uint3 id)
{
    return id.x + id.y * _Resolution + id.z *_Resolution * _Resolution ;
    //return _Resolution * (_Resolution * (id.z % 6) + id.x);
}
[numthreads(8,8,6)]
void CSMain2 (uint3 id : SV_DispatchThreadID)
{
    CubeFace cubeFace = GenerateCubeFaceProperties(id.z % 6);
    int index = indexFromId(id);

    int vertStart = index * 4;
    int triStart = index * 6;
    if(id.x < _Resolution && id.y < _Resolution)
    {
    /*
                float3 uA = side.uvOrigin + side.uAxis * (float)uCoord / Resolution;
            float3 uB = side.uvOrigin + side.uAxis * (float)(uCoord + 1) / Resolution;
    */
        float3 p0 = cubeFace.uvOrigin + cubeFace.uAxis * (float) id.x /(float) _Resolution;
        float3 p1 = cubeFace.uvOrigin + cubeFace.uAxis * (float)(id.x + 1)/(float)_Resolution;
        float3 p2 = p0 + cubeFace.vAxis * (float)id.y/(float)_Resolution;
        float3 p3 = p1 + cubeFace.vAxis * (float)id.y/(float) _Resolution;

        _VertexBuffer[vertStart] = p0; 
        _VertexBuffer[vertStart + 1] = p1;
        _VertexBuffer[vertStart + 2] = p2;
        _VertexBuffer[vertStart + 3] = p3;

       /* _IndexBuffer[triStart] = vertStart;
        _IndexBuffer[triStart + 1] = vertStart + 2;
        _IndexBuffer[triStart + 2] = vertStart + 1;

        _IndexBuffer[triStart + 3] = vertStart + 1;
        _IndexBuffer[triStart + 4] = vertStart + 2;
        _IndexBuffer[triStart + 5] = vertStart + 3;
    */
        _IndexBuffer[triStart] = vertStart;
        _IndexBuffer[triStart + 1] = vertStart + _Resolution + 1;
        _IndexBuffer[triStart + 2] = vertStart + _Resolution + 2;

        _IndexBuffer[triStart + 3] = vertStart;
        _IndexBuffer[triStart + 4] = vertStart + _Resolution + 2;
        _IndexBuffer[triStart + 5] = vertStart + 1;
    }

}
[numthreads(100,1,6)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    _ModelMatrix = CreateMatrix(float3(5.0, 5.0, 5.0), float3(1,1,1), float3(0, 1, 0), 0);
    CubeFace cubeFace = GenerateCubeFaceProperties(id);
    uint index = indexFromId(id);
    uint vertStart = 4 * _Resolution * (_Resolution * cubeFace.id + id.x);
    uint triStart = 6 * _Resolution * (_Resolution * cubeFace.id + id.x);
    float3 u0 = cubeFace.uvOrigin + cubeFace.uAxis * (float) id.x /(float) _Resolution;
    float3 u1 = cubeFace.uvOrigin + cubeFace.uAxis * (float)(id.x + 1)/(float)_Resolution;

    float3 p0 = normalize(u0);
    float3 p1 = normalize(u1);

    for(int y = 1; y <= _Resolution; y++, vertStart+=4,triStart+=6){
        if(id.x < _Resolution)
        {
            float3 p2 = normalize(u0 + cubeFace.vAxis * (float)y/(float)_Resolution);
            float3 p3 = normalize(u1 + cubeFace.vAxis * (float)y/(float) _Resolution);

            _VertexBuffer[vertStart] = p0; 
            _VertexBuffer[vertStart + 1] = p1;
            _VertexBuffer[vertStart + 2] =  p2;
            _VertexBuffer[vertStart + 3] =  p3;

            _IndexBuffer[triStart] = vertStart;
            _IndexBuffer[triStart + 1] = vertStart + 2;
            _IndexBuffer[triStart + 2] = vertStart + 1;

            _IndexBuffer[triStart + 3] = vertStart + 1;
            _IndexBuffer[triStart + 4] = vertStart + 2;
            _IndexBuffer[triStart + 5] = vertStart + 3;
            p0 = p2;
            p1 = p3;
        }
  }
}

  [numthreads(64,1,6)]
void CSMain3 (uint3 id : SV_DispatchThreadID)
{
    _ModelMatrix = CreateMatrix(_Positions[0], float3(1,1,1), float3(0, 1, 0), 0);
    CubeFace cubeFace = GenerateCubeFaceProperties(id.z % 6);
    int index = indexFromId(id);

    int vertStart = 4 * _Resolution * (_Resolution * cubeFace.id + id.x);
    int triStart = 6 * _Resolution * (_Resolution * cubeFace.id + id.x);
    float3 u0 = cubeFace.uvOrigin + cubeFace.uAxis * (float) id.x /(float) _Resolution;
    float3 u1 = cubeFace.uvOrigin + cubeFace.uAxis * (float)(id.x + 1)/(float)_Resolution;

    float3 p0 = normalize(u0);
    float3 p1 = normalize(u1);

    for(int y = 1; y <= _Resolution; y++, vertStart+=4,triStart+=6){
        if(id.x < _Resolution)
        {
            float3 p2 = normalize(u0 + cubeFace.vAxis * (float)y/(float)_Resolution);
            float3 p3 = normalize(u1 + cubeFace.vAxis * (float)y/(float) _Resolution);

            _VertexBuffer[vertStart] = mul(_ModelMatrix, p0); 
            _VertexBuffer[vertStart + 1] = mul(_ModelMatrix, p1);
            _VertexBuffer[vertStart + 2] = mul(_ModelMatrix, p2);
            _VertexBuffer[vertStart + 3] = mul(_ModelMatrix,p3);

            _IndexBuffer[triStart] = vertStart;
            _IndexBuffer[triStart + 1] = vertStart + 2;
            _IndexBuffer[triStart + 2] = vertStart + 1;

            _IndexBuffer[triStart + 3] = vertStart + 1;
            _IndexBuffer[triStart + 4] = vertStart + 2;
            _IndexBuffer[triStart + 5] = vertStart + 3;
            p0 = p2;
            p1 = p3;
        }
  }
}
