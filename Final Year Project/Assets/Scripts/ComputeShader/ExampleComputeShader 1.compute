// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct MandelbrotData
{
	float width;
	float height;
	float real;
	float imaginary;
	int screenWidth;
	int screenHeight;
};

RWTexture2D<float4> Result;
StructuredBuffer<MandelbrotData> buffer;

uint maxIterations;

[numthreads(24, 24, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float real, imag;
	float real2, imag2;
	float xAdjust = (float)id.x / buffer[0].screenWidth * buffer[0].width;
	float yAdjust = (float)id.y / buffer[0].screenHeight * buffer[0].height;
	uint ite = 0;

	float4 CalcColor = { 0.0f , 0.0f, 0.0f, 1.0f };

	real = buffer[0].real + xAdjust;
	imag = buffer[0].imaginary + yAdjust;

	//Cardioid-bulb checking
	float q = (real - 0.25) * (real - 0.25) + imag * imag;
	if (q * (q + (real - 0.25)) < 0.25 * (imag * imag))
	{
		Result[id.xy] = CalcColor;
		return;
	}


	for (uint i = 0; i < maxIterations; i++)
	{
		real2 = real * real;
		imag2 = imag * imag;

		if (real2 + imag2 > 4.0)
		{
			break;
		}
		else {
			imag = (2.0 * real * imag + buffer[0].imaginary + yAdjust);
			real = (real2 - imag2 + buffer[0].real + xAdjust);
			ite++;
		}
	}


	//First
	//if (ite != maxIterations)
	//{
	//    int max = maxIterations / 3;
	//    CalcColor[0] = (float)(ite % (max * 2)) / (max * 2);
	//    CalcColor[1] = (float)(ite % (max)) / (max);
	//    CalcColor[2] = (float)(ite % maxIterations) / maxIterations;
	//}

	//float grey = (float)ite / maxIterations;
	//Result[id.xy] = float4(grey, grey, grey, 1.0f);

	//float n = (float)ite;
	//float x = 0.1f;
	//// Thank you @Eriksonn - Wonderful Magic Fractal Oddball Man
	//CalcColor[0] = 0.5f * sin(x * n) + 0.5f;
	//CalcColor[1] = 0.5f * sin(x * n + 2.094f) + 0.5f;
	//CalcColor[2] = 0.5f * sin(x * n + 4.188f) + 0.5f;

	if (ite != maxIterations)
	{
		int colorNr = ite % 16;

		switch (colorNr)
		{
		case 0:
		{
			CalcColor[0] = 66.0f / 255.0f;
			CalcColor[1] = 30.0f / 255.0f;
			CalcColor[2] = 15.0f / 255.0f;

			break;
		}
		case 1:
		{
			CalcColor[0] = 25.0f / 255.0f;
			CalcColor[1] = 7.0f / 255.0f;
			CalcColor[2] = 26.0f / 255.0f;
			break;
		}
		case 2:
		{
			CalcColor[0] = 9.0f / 255.0f;
			CalcColor[1] = 1.0f / 255.0f;
			CalcColor[2] = 47.0f / 255.0f;
			break;
		}

		case 3:
		{
			CalcColor[0] = 4.0f / 255.0f;
			CalcColor[1] = 4.0f / 255.0f;
			CalcColor[2] = 73.0f / 255.0f;
			break;
		}
		case 4:
		{
			CalcColor[0] = 0.0f / 255.0f;
			CalcColor[1] = 7.0f / 255.0f;
			CalcColor[2] = 100.0f / 255.0f;
			break;
		}
		case 5:
		{
			CalcColor[0] = 12.0f / 255.0f;
			CalcColor[1] = 44.0f / 255.0f;
			CalcColor[2] = 138.0f / 255.0f;
			break;
		}
		case 6:
		{
			CalcColor[0] = 24.0f / 255.0f;
			CalcColor[1] = 82.0f / 255.0f;
			CalcColor[2] = 177.0f / 255.0f;
			break;
		}
		case 7:
		{
			CalcColor[0] = 57.0f / 255.0f;
			CalcColor[1] = 125.0f / 255.0f;
			CalcColor[2] = 209.0f / 255.0f;
			break;
		}
		case 8:
		{
			CalcColor[0] = 134.0f / 255.0f;
			CalcColor[1] = 181.0f / 255.0f;
			CalcColor[2] = 229.0f / 255.0f;
			break;
		}
		case 9:
		{
			CalcColor[0] = 211.0f / 255.0f;
			CalcColor[1] = 236.0f / 255.0f;
			CalcColor[2] = 248.0f / 255.0f;
			break;
		}
		case 10:
		{
			CalcColor[0] = 241.0f / 255.0f;
			CalcColor[1] = 233.0f / 255.0f;
			CalcColor[2] = 191.0f / 255.0f;
			break;
		}
		case 11:
		{
			CalcColor[0] = 248.0f / 255.0f;
			CalcColor[1] = 201.0f / 255.0f;
			CalcColor[2] = 95.0f / 255.0f;
			break;
		}
		case 12:
		{
			CalcColor[0] = 255.0f / 255.0f;
			CalcColor[1] = 170.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 13:
		{
			CalcColor[0] = 204.0f / 255.0f;
			CalcColor[1] = 128.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 14:
		{
			CalcColor[0] = 153.0f / 255.0f;
			CalcColor[1] = 87.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 15:
		{
			CalcColor[0] = 106.0f / 255.0f;
			CalcColor[1] = 52.0f / 255.0f;
			CalcColor[2] = 3.0f / 255.0f;
			break;
		}
		}
	}

	//float col = cos(ite);
	//
	//if (ite != maxIterations)
	//{
	//	CalcColor[0] = pow(col, 4);
	//	CalcColor[1] = pow(col, 16);
	//	CalcColor[2] = exp(col);
	//}


	//float col = (float)ite / maxIterations;
	//
	//if (ite != maxIterations)
	//{
	//	CalcColor[0] = col;
	//	CalcColor[1] = col * 2.0f;
	//	CalcColor[2] = col * 3.0f;
	//}

	Result[id.xy] = CalcColor;
}