// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


struct Plane
{
    float3 normal;
    float distance;
};

float lodSwitchDist;
float renderDistance;
int chunkSize;
float3 playerPosition;
int3 playerChunkCoord;
int chunksVisibleInViewDist;
StructuredBuffer<Plane> _ViewFrustumPlanesBuffer;
Texture2D<float4> _Texture;
RWTexture2D<float4> _RenderTexture;
SamplerState sampler_Texture;


struct MeshProperties
{
    float4x4 mat;
};

uint IntersectSphere(float3 centre, float radius)
{

    for(uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanesBuffer[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if(normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}
float GenerateRandom(int x)
{
    float2 p = float2(x, sqrt(x));
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

float4x4 GenerateTRSMatrix(float3 position, float scale)
{
    float4x4 mat = 
    {
        scale, 0.0, 0.0, position.x,
        0.0, scale, 0.0, position.y,
        0.0, 0.0, scale, position.z,
        0.0, 0.0, 0.0, 1.0
    };
    return mat;
}
MeshProperties GenerateMeshProperties(float3 position, float scale)
{
    MeshProperties mp = (MeshProperties)0;
    mp.mat = GenerateTRSMatrix(position, scale);
    return mp;
}
AppendStructuredBuffer<MeshProperties> _Properties;
AppendStructuredBuffer<MeshProperties> _Properties2;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= chunksVisibleInViewDist || id.y >= chunksVisibleInViewDist || id.z >= chunksVisibleInViewDist) return;
    int currentChunkCoordX = round(playerPosition.x / chunkSize);
    int currentChunkCoordY = round(playerPosition.y / chunkSize);
    int currentChunkCoordZ = round(playerPosition.z / chunkSize);

    int curXOffset = -chunksVisibleInViewDist/2 + currentChunkCoordX + id.x; 
    int curYOffset = -chunksVisibleInViewDist/2 + currentChunkCoordY + id.y; 
    int curZOffset = -chunksVisibleInViewDist/2 + currentChunkCoordZ + id.z; 

    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    int seed = viewedChunkCoord.x + viewedChunkCoord.y * chunksVisibleInViewDist + viewedChunkCoord.z * chunksVisibleInViewDist * chunksVisibleInViewDist;
    uint width;
    uint height;
    _Texture.GetDimensions(width, height);
    float u = frac((float)(id.x & id.z)/ (float) width);
    float v = frac((float)(id.y & id.z) / (float) height);
    float val = _Texture.SampleLevel(sampler_Texture, float2(u, v), 0);
    if(val > -100000)
    {
        float3 actualPosition = viewedChunkCoord * chunkSize;
        if(IntersectSphere(actualPosition, 1) != 0)
        {
            if(length(actualPosition - playerPosition) < lodSwitchDist)
            {
                _RenderTexture[uint2(0,0)] = float4(1.0, 0.0, 0.0, 1.0);
                _Properties2.Append(GenerateMeshProperties(actualPosition, 1));
            }else{
                _Properties.Append(GenerateMeshProperties(actualPosition, 1));
            }

        }
    }
}


[numthreads(8,8,8)]
void CSMain3 (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= chunksVisibleInViewDist || id.y >= chunksVisibleInViewDist || id.z >= chunksVisibleInViewDist) return;
    int currentChunkCoordX = round(playerPosition.x / chunkSize);
    int currentChunkCoordY = round(playerPosition.y / chunkSize);
    int currentChunkCoordZ = round(playerPosition.z / chunkSize);

    int curXOffset = -chunksVisibleInViewDist/2 + currentChunkCoordX + id.x; 
    int curYOffset = -chunksVisibleInViewDist/2 + currentChunkCoordY + id.y; 
    int curZOffset = -chunksVisibleInViewDist/2 + currentChunkCoordZ + id.z; 

    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    int seed = viewedChunkCoord.x + viewedChunkCoord.y * chunksVisibleInViewDist + viewedChunkCoord.z * chunksVisibleInViewDist * chunksVisibleInViewDist;
    uint width;
    uint height;
    _Texture.GetDimensions(width, height);
    float u = frac((float)curXOffset / (float) width);
    float v = frac((float)curYOffset / (float) height);
    if(abs(GenerateRandom(seed)) > 0.2/*_Texture.Load(u, v).x > 0.2*/)
    {
        float3 actualPosition = viewedChunkCoord * chunkSize;
        if(IntersectSphere(actualPosition, 1) != 0)
        {
            _Properties.Append(GenerateMeshProperties(actualPosition, 1));
        }
    }
}
          

[numthreads(8,8,8)]
void CSMain2 (uint3 id : SV_DispatchThreadID)
{
    int currentChunkCoordX = round(playerPosition.x / chunkSize);
    int currentChunkCoordY = round(playerPosition.y / chunkSize);
    int currentChunkCoordZ = round(playerPosition.z / chunkSize);

    int curXOffset = -chunksVisibleInViewDist/2 + currentChunkCoordX + id.x; 
    int curYOffset = -chunksVisibleInViewDist/2 + currentChunkCoordX + id.y; 
    int curZOffset = -chunksVisibleInViewDist/2 + currentChunkCoordX + id.z; 
    for(int xOffset = -chunksVisibleInViewDist/2; xOffset <= chunksVisibleInViewDist/2; xOffset++)
    {
        for(int yOffset = -chunksVisibleInViewDist/2; yOffset <= chunksVisibleInViewDist/2; yOffset++)
        {
            for(int zOffset = -chunksVisibleInViewDist/2; zOffset <= chunksVisibleInViewDist; zOffset++)
            {
                int3 viewedChunkCoord = int3(currentChunkCoordX + xOffset, currentChunkCoordY + yOffset, currentChunkCoordZ + zOffset);
                int seed = viewedChunkCoord.x + viewedChunkCoord.y * chunksVisibleInViewDist + viewedChunkCoord.z * chunksVisibleInViewDist * chunksVisibleInViewDist;
                if(true /*GenerateRandom(seed) > 0.5*/)
                {
                    float3 actualPosition = viewedChunkCoord * chunkSize;
                    if(IntersectSphere(actualPosition, 1) != 0)
                    {
                        _Properties.Append(GenerateMeshProperties(actualPosition, 1));
                    }
                }
            }
        }
    }
}
/*
 int currentChunkCoordX = Mathf.RoundToInt(viewerPosition.x / chunkSize);
        int currentChunkCoordY = Mathf.RoundToInt(viewerPosition.y / chunkSize);
        int currentChunkCoordZ = Mathf.RoundToInt(viewerPosition.z / chunkSize);
        playerChunkCoord = new Vector3Int(currentChunkCoordX, currentChunkCoordY, currentChunkCoordZ);
        for (int xOffset = -chunksVisibleInViewDist / 2; xOffset <= chunksVisibleInViewDist / 2; xOffset++) 
        {
            for (int yOffset = -chunksVisibleInViewDist / 2; yOffset <= chunksVisibleInViewDist / 2; yOffset++) 
            {
                for (int zOffset = -chunksVisibleInViewDist / 2; zOffset <= chunksVisibleInViewDist / 2; zOffset++) 
                {
                    Vector3Int viewedChunkCoord = new Vector3Int(currentChunkCoordX + xOffset, currentChunkCoordY + yOffset, currentChunkCoordZ + zOffset);
                    int seed = viewedChunkCoord.x + viewedChunkCoord.y * chunksVisibleInViewDist + viewedChunkCoord.z * chunksVisibleInViewDist * chunksVisibleInViewDist;
                    UnityEngine.Random.InitState(seed);
                    if (UnityEngine.Random.Range(0, 20) == 0) 
                    {
                        Vector3 actualPosition = viewedChunkCoord * chunkSize;
                        if (IntersectSphere(actualPosition, 2) != 0)
                        {
                            Quaternion rotation = Quaternion.Euler(0, 0, 0);
                            Vector3 scale = Vector3.one;
                            chunkPositions.Add(new MeshProperties { mat = Matrix4x4.TRS(actualPosition, rotation, scale) });
                        }

                    }
                    /*StarSystem starSystem = new StarSystem(viewedChunkCoord.x, viewedChunkCoord.y, viewedChunkCoord.z);
                    if (starSystem.starExists) 
                    {
                        Vector3 actualCoord = (Vector3) viewedChunkCoord * chunkSize;
                        chunkPositions.Add(actualCoord);
                    }
                }
            }
        }


*/