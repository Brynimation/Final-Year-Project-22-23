#pragma kernel CSMain
#include "Assets/ActualProject/Utility.hlsl"
float solarSystemSwitchDist;
float3 playerPosition;

RWStructuredBuffer<ChunkIdentifier> _ChunksBuffer;
RWStructuredBuffer<int> _SolarSystemCount;
AppendStructuredBuffer<SolarSystem> _SolarSystems; 
AppendStructuredBuffer<Planet> _Planets;
float time;
float timeStep;

float CalculatePlanetAngularVelocity(float dist, float starMass, float planetMass)
{
    //m1rw^2 = Gm1m2/r^2 
    //w = sqrt(Gm2 / r^3)
    float angularVelSqrd = _G * starMass / pow(dist, 3.0);
    float angularVelocity = sqrt(angularVelSqrd);
    return angularVelocity;
}
float calculateSphereMass(float sphereRadius, float sphereDensity)
{
    return (4.0/3.0) * PI * pow(sphereRadius, 3.0) * sphereDensity;
}

// Example compute shader function
[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if(_SolarSystemCount[0] == 0) return;
    if(id.x >= _ChunksBuffer[0].chunksInViewDist || id.y >= _ChunksBuffer[0].chunksInViewDist || id.z >= _ChunksBuffer[0].chunksInViewDist) return;
    int currentChunkCoordX = round(playerPosition.x / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordY = round(playerPosition.y / float(_ChunksBuffer[0].chunkSize));
    int currentChunkCoordZ = round(playerPosition.z / float(_ChunksBuffer[0].chunkSize));

    int curXOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordX + id.x; 
    int curYOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordY + id.y; 
    int curZOffset = -round(_ChunksBuffer[0].chunksInViewDist/2) + currentChunkCoordZ + id.z; 

    int3 viewedChunkCoord = int3(curXOffset, curYOffset, curZOffset);
    uint width;
    uint height;

    float3 actualPosition = viewedChunkCoord * _ChunksBuffer[0].chunkSize;
    float dist = length(actualPosition - playerPosition);

    if (dist < solarSystemSwitchDist && _ChunksBuffer[0].chunkType == 2)
    {
        float random = Hash21(actualPosition.xy + actualPosition.z);
        SolarSystem system = (SolarSystem)0;
        system.starPosition = actualPosition;
        system.starRadius = lerp(0.25, 2.0, random);
        system.starMass = calculateSphereMass(system.starRadius, 1.0);
        system.starColour = lerp(float4(1.0, 0.0, 0.0, 1.0), float4(0.0, 0.0, 1.0, 1.0), random);
        system.planetCount = ceil(10 * random);
        _SolarSystems.Append(system);
        float maxDist = 10.0;
        for(int i = 0; i < system.planetCount; i++)
        {
            float planetRandom = Hash1(float(i)/float(system.planetCount) * length(actualPosition));
            Planet planet = (Planet)0;
            float distFromStar = maxDist * planetRandom;
            float initialAngle = (float(i)/float(system.planetCount)) * 2.0 * PI;
            float angle = initialAngle + CalculatePlanetAngularVelocity(distFromStar, system.starMass, 1.0) * time * timeStep;
            float x = distFromStar * cos(angle);
            float z = distFromStar * sin(angle);
            planet.position = actualPosition + float3(x, 0, z);
            planet.radius = lerp(0.1, 0.4, planetRandom);
            planet.mass = calculateSphereMass(planet.radius, 1.0);

            _Planets.Append(planet);
        }

    }
}

