// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.14159265

//AppendStructuredBuffer<float3> _PositionsLOD0;
//AppendStructuredBuffer<float3> _PositionsLOD1;

struct Plane
{
    float3 normal;
    float distance;
};

struct InstanceData
{
    float3 position;
    float4 colour;
    float radius;
    uint culled;
};

struct ThreadIdentifier
{
    float3 position;
    float4 colour;
    float radius;
    uint id;
};
AppendStructuredBuffer<ThreadIdentifier> _PositionsLODAppend0;
AppendStructuredBuffer<ThreadIdentifier> _PositionsLODAppend1;
RWStructuredBuffer<InstanceData> _PositionsLOD0;
RWStructuredBuffer<InstanceData> _PositionsLOD1;
StructuredBuffer<Plane> _ViewFrustumPlanes;

uniform float4 _StandardColour;
uniform float _GalaxyDensity;
uniform float4 _LargeStarRadius;
uniform float4 _SmallStarRadius;
uniform float4 _H2RegionColour;
uniform float3 _GalacticCentre;
uniform float _MinEccentricity;
uniform float _MaxEccentricity;
uniform float _GalacticDiskRadius;
uniform float _GalacticHaloRadius;
uniform float _GalacticBulgeRadius;
uniform float _Bias;
uniform float _ProportionOfStarsInBulge;
uniform float _ProportionOfStarsInDisk;
uniform float _AngularOffsetMultiplier;
uniform float3 _CameraPosition;
uniform float _LODSwitchDist;
uniform float _TimeStep;
uniform int _NumParticles;
uniform float _CentralIntensity;
uniform float _time;
uniform float _HalfLightRadius;

float GenerateRandom(int x)
{
    float2 p = float2(x, sqrt(x));
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

/*
This function calculates the current position of a star in its orbit. This requires the star's current position in its orbit (theta),
the angle of inclination of its orbit (angleOffset), the semi-major (a) and semi-minor (b) axes of the ellipse. Obtained from line 425 from
here: https://github.com/beltoforion/Galaxy-Renderer/blob/master/GalaxyWnd.cpp
        GLfloat fx = (GLfloat)(x + (a * cosalpha * cosbeta - b * sinalpha * sinbeta));
        GLfloat fy = (GLfloat)(y + (a * cosalpha * sinbeta + b * sinalpha * cosbeta));
*/

float3 calculatePosition(float theta, float angleOffset, float a, float b, int id)
{
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);
    float cosOffset = cos(angleOffset);
    float sinOffset = sin(angleOffset);

    float xPos = a * cosTheta * cosOffset - b * sinTheta * sinOffset + _GalacticCentre.x;
    float yPos = a * cosTheta * sinOffset + b * sinTheta * cosOffset + _GalacticCentre.y;
    float zPos = _GalacticCentre;
    float3 pos = float3(xPos, yPos, zPos);
    return pos;
}

float GetAccurateSemiMajorAxis(uint id)
{
    // Calculate the corresponding radius
    float radius = _GalacticHaloRadius * (exp(_Bias * (float) id / (float) _NumParticles) - 1.0);
    return radius;
}
/*float GetAccurateSemiMajorAxis(uint id)
{
    int bulgeStarCount = int(_ProportionOfStarsInBulge * _NumParticles);
    int diskStarCount = int(_ProportionOfStarsInDisk * _NumParticles);
    //return _GalacticHaloRadius * (exp((float)id/(float)_NumParticles) - 1.0);
    ;
    float radiusInBulge = _GalacticBulgeRadius * (exp((float)id/(float)bulgeStarCount) - 1.0);
    float radiusInDisk = -_GalacticBulgeRadius + _GalacticDiskRadius * (exp((float)(id - bulgeStarCount)/(float)(diskStarCount-bulgeStarCount)) - 1.0);
    float radiusInHalo = -_GalacticDiskRadius +  _GalacticHaloRadius * exp((float)(id - diskStarCount)/(float)(_NumParticles - diskStarCount) - 1.0);
    if(id < bulgeStarCount) return radiusInBulge;
    else if(id >= bulgeStarCount && id < diskStarCount)return radiusInDisk;
    else return radiusInHalo;
    /*if(id < bulgeStarCount) //25% particles live within the bulge
    {
        float ln = log((float) (bulgeStarCount) / (float) (bulgeStarCount - id));
        return pow(ln * _GalacticBulgeRadius, 4);
    }
    else if(id >= bulgeStarCount && id < diskStarCount)
    {
        return _GalacticDiskRadius * log( (float) (diskStarCount / (float) (diskStarCount - bulgeStarCount - id))); //beyond the bulge, in the disk
    }else{
        return _GalacticHaloRadius * log( (float) (_NumParticles) / (float) (_NumParticles - id)); //beyond the disk, in the halo
    }

}*/
float GetSemiMajorAxis(float x)
{

    return (x * x * x * _GalacticHaloRadius);
}

float GetEccentricity(float r)
{
    if (r < _GalacticBulgeRadius)
    {
        return lerp(_MaxEccentricity, _MinEccentricity, r / _GalacticBulgeRadius);
    }
    else if (r >= _GalacticBulgeRadius && r < _GalacticDiskRadius)
    {
        return lerp(_MinEccentricity, _MaxEccentricity, (r - _GalacticBulgeRadius) / (_GalacticDiskRadius - _GalacticBulgeRadius));
    }
    else if (r >= _GalacticDiskRadius && r < _GalacticHaloRadius)
    {
        return lerp(_MaxEccentricity, 1.0, (r - _GalacticDiskRadius) / (_GalacticHaloRadius - _GalacticDiskRadius));
    }
    else
    {
        return 1.0;
    }
}



/*Generates a random, initial angle based on the id of the star. This angle is known as the true anomaly, and is a measure of how far through its orbit the orbitting body is*/
float GetRandomAngle(uint id)
{
    return radians((GenerateRandom(id) * 360));
}

float GetExpectedAngularVelocity(uint i, float r)
{
    //One simplifying assumption we make here is that, as the nuclear bulge of the galaxy is very densely packed with stars, we consider it to behave as a 
    //uniformly dense solid sphere.
    //Due to Newton's shell theorem: for a test particle contained within a sphere of constant density, gravitational force (and hence acceleration)
    //increases linearly with distance from the centre (at 0) to the surface of the sphere (at a maximum).  Beyond the sphere, we use Newton's 
    //universal law of gravitation to show that orbital velocity is proportion to 1/sqrt(distance) from the centre of mass, and hence, angular velocity is proportional to 1/distance^(3/2).
    //Here, we make the simplifying assumption that the nuclear bulge is a sphere of constant density that houses the mass of the entire galaxy.
    //We do the lerping so that the transition from the bulge to the disc is more seamless
    float galaxyMass = 4 / 3 * PI * pow(_GalacticBulgeRadius, 3.0) * _GalaxyDensity;
    float discSpeed = sqrt(galaxyMass / pow(r, 3));
    float bulgeSpeed = 5.0; //angular velocity in the bulge is constant.
    float interpolationDist = _GalacticBulgeRadius / 2.0;
    // Calculate a smooth transition factor between bulgeSpeed and discSpeed
    float t = smoothstep(_GalacticBulgeRadius - interpolationDist, _GalacticBulgeRadius, r);

    // Calculate the interpolated speed
    float speed = lerp(bulgeSpeed, discSpeed, t);

    return speed;

    //return sqrt((i * 50)/((_NumParticles - 1) * r)); //angularVel = sqrt(G * mass within the radius r / radius^3)

    //Using Newton's form of Kepler's third law:
    //T = 4
}

/*Determines the angle of inclination of the elliptical orbit. Based on this article: https://beltoforion.de/en/spiral_galaxy_renderer/, by
having the inclination of the orbit increase with the size of the semi-major axis of the orbit, we produce the desired spiral structure of the galaxy*/
float GetAngularOffset(uint id)
{
    int multiplier = id * _AngularOffsetMultiplier;
    int finalParticle = _NumParticles - 1;
    return radians((multiplier / (float) finalParticle) * 360);
}
float3 GetPointOnEllipse(uint id)
{
    float semiMajorAxis = GetAccurateSemiMajorAxis(id); //GetSemiMajorAxis(id/(float)_NumParticles);
    float eccentricity = GetEccentricity(semiMajorAxis);
    float angularVelocity = GetExpectedAngularVelocity(id, semiMajorAxis);
    float semiMinorAxis = eccentricity * semiMajorAxis;
    float currentAngularOffset = GetAngularOffset(id);
    float theta = GetRandomAngle(id) + angularVelocity * _time * _TimeStep;
    return calculatePosition(theta, currentAngularOffset, semiMajorAxis, semiMinorAxis, id);
}

uint IntersectSphere(float3 centre, float radius)
{

    for (uint i = 0; i < 6; i++)
    {
        Plane plane = _ViewFrustumPlanes[i];
        float normalDotCentre = dot(plane.normal, centre);
        float cullDist = plane.distance;
        if (normalDotCentre + cullDist + radius <= 0)
        {
            return 0;
        }
    }
    return 1;
}
/*[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _NumParticles) return;
    /*Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object'
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    InstanceData data;
    data.id = id.x;
    data.radius = GenerateRandom(id.x);
    data.colour = (id.x % 100) == 0 ? float4(1,0,0,1) : float4(0,1,0,1);
    data.position = float3(0, 0, - _GalacticHaloRadius * 2);

    //_PositionsLOD0[id.x] = data;
    //_PositionsLOD1[id.x] = data;
    float3 posObjectSpace = GetPointOnEllipse(id.x);

    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if(inViewFrustum == 0) return;
    if(dist < _LODSwitchDist)
    {
         data.position = posObjectSpace;
         InterlockedAdd(_PositionsLOD0, data);
    }else{
         data.position = posObjectSpace;
         InterlockedAdd(_PositionsLOD1, data);
    }
}
*/

[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumParticles)
        return;
    /*Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object*/
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    ThreadIdentifier data;
    data.id = id.x;
    data.radius = (id.x % 100) == 0 ? _LargeStarRadius : _SmallStarRadius; //100 : 50;
    data.colour = (id.x % 100) == 0 ? _H2RegionColour : _StandardColour;


    float3 posObjectSpace = GetPointOnEllipse(id.x);
    data.position = posObjectSpace;

    //In our world, the sun would be roughly 26080 unity units from the galactic centre. We're highlighting sun like stars'
    float semiMajorAxis = GetAccurateSemiMajorAxis(id); //GetSemiMajorAxis(id.x/(float)_NumParticles);
    if (abs(semiMajorAxis - 26080) < 10)
    {
        data.radius = 1000;
        data.colour = float4(1.0, 0.0, 1.0, 1.0);
    }
    float dist = length(posObjectSpace - _CameraPosition) - data.radius;
    uint inViewFrustum = IntersectSphere(posObjectSpace, data.radius);
    if (inViewFrustum == 0)
        return;
    if (dist < _LODSwitchDist)
    {
        _PositionsLODAppend0.Append(data);
    }
    else
    {
        _PositionsLODAppend1.Append(data);
    }
}

[numthreads(256, 1, 1)]
void NOTCSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumParticles)
        return;
    /*Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object*/
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    InstanceData data;
    data.radius = (id.x % 100) == 0 ? 100 : 50;
    data.colour = (id.x % 100) == 0 ? _H2RegionColour : _StandardColour;
    data.position = float3(0, 0, -_GalacticHaloRadius * 2);


    float3 posObjectSpace = GetPointOnEllipse(id.x);

    //In our world, the sun would be roughly 26080 unity units from the galactic centre. We're highlighting sun like stars'
    float semiMajorAxis = GetSemiMajorAxis(id.x);
    if (abs(semiMajorAxis - 26080) < 10)
    {
        data.radius = 1000;
        data.colour = float4(1.0, 0.0, 1.0, 1.0);
    }
    float dist = length(posObjectSpace - _CameraPosition) - data.radius;
    uint inViewFrustum = IntersectSphere(posObjectSpace, data.radius);
    data.culled = inViewFrustum;
    _PositionsLOD0[id.x] = data;
    _PositionsLOD1[id.x] = data;
    if (inViewFrustum == 0)
        return;
    if (dist < _LODSwitchDist)
    {
        _PositionsLOD0[id.x].position = posObjectSpace;
    }
    else
    {
        _PositionsLOD1[id.x].position = posObjectSpace;
    }
}
/*
[numthreads(256,1,1)]
void CSMain3 (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= _NumParticles) return;
    Unity cameras perform frustum culling automatically when objects are not within the bounds of the instances we want to render. So, to perform frustum culling, we just move any
    positions that don't fall inside the view frustum to a position outside the bounds of the object'
    //_PositionsLOD0[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    //_PositionsLOD1[id.x] = float3(0, 0, -_GalacticHaloRadius * 2);
    _PositionsLOD0[id.x] = float3(0, 0, -15000);
    _PositionsLOD1[id.x] = float3(0, 0, -15000);
    float3 posObjectSpace = GetPointOnEllipse(id.x);
    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if(inViewFrustum == 0) return;
    if(dist < _LODSwitchDist)
    {
        _PositionsLOD0[id.x] = posObjectSpace;
    }else{
        _PositionsLOD1[id.x] = posObjectSpace;
    }
}*/
[numthreads(256, 1, 1)]
void CSMain2(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _NumParticles)
        return;
    //_PositionsLOD0[id.x] = float3(0, 0, -10000);
    //_PositionsLOD1[id.x] = float3(0, 0, -10000);
    float3 posObjectSpace = GetPointOnEllipse(id.x);
    float dist = length(posObjectSpace - _CameraPosition);
    uint inViewFrustum = IntersectSphere(posObjectSpace, 10);
    if (inViewFrustum == 0)
        return;
    if (dist < _LODSwitchDist)
    {
        //_PositionsLODAppend0.Append(posObjectSpace);
    }
    else
    {
        //_PositionsLODAppend1.Append(posObjectSpace);
    }
}